Striver's DP seriese.
- length:- 60 videos
- topics? 
    - Tabulation
    - Memoisation
    - Space Optimization

- The best ever (promised)

______________________

DP1:-

- We use a array to store the results of previous recursion calls so that we do not "Override the Subproblems" by doing recursive call to the same problem.

- We use table or a Map to store the values.

- Optimising space complexity is the most important thing to know here.

Q. Fibonacci seriese problem using DP (without recursion and even using less space complexity)
______________________

DP2:-

- How to understand that this is a DP problem??
WHEN QUESTION GOES LIKE...

    - return the total no. of ways
    - there are multiple ways but return maximum or minimum
    - whenever "Try all posible ways" comes, recursion comes.

.. because in these type of problems we tend to apply recursion.

- First try to figure out if the problem is recursion problem and then go to DP from that.

While trying to solve prblems by DP,

i. Try to represent the problem in forms of index.
ii. do all possible stuffs on that index according to the problem statement.
iii. sum up all the stuffs -> Count all ways
iv. Min. of all stuffs -> find min.
v. Max. of all stuffs -> find max.

Q. Climbing staires problem
 - this problem got converted into Fibonacci problem by applying the above steps, so didn't code it.

______________________

DP3:-

- there are a lot of things to take notes of (rewatch the 3rd tutorial for that)

Q. Frog Jump using,
    - Memoisation
    - Tabulation
    - Space Optimization 

DP4:- 

- not much but frog jump from K distance.

______________________

DP5:- 

Q. Mamimum sum of non-adjacent elements (SubSequence logic)
    - pick and not pick method

- Just stick to the DP1 and DP2 concepts and you are good to go.

DP6:- 
    - nothing much but just slight change in DP5 question.
    - House of Robber question of leetcode.

______________________

DP7:-

Q. Ninja's Training
    - insanely good question and the same explanation.
    - found recursion tree a bit tricky but understood.
    (Continue from 32:27 in video)

______________________

DP8:-

Q. DP on grids.

Any dp question can be solved by,
1. Interpret stuff in terms of Indexes.
2. Get the base cases
3. Write recursion (Do all stuffs on that)
4. Now Memoisation..
    I. make a dp array (1D or 2D)
    II. save answers in that (pre-define the base case in the dp array)
    III. check if Subproblem is already solved in the dp array and return the answer if solved.
5. Now Tabulation..
    i. Run the for-loop from 0 to n.
    ii. copy the recurrance from Memoisation
6. Now Space Optimization..
    i. see if we are using previous data (n-1) 
    ii. store that in prev and cur variables.
    iii. swap the prev == curr at the end of the for-loop

______________________

DP9:-

- Maze path problem

- It can be easily solved by the DP8 method with a bit of changes

______________________

DP10:-

- Minimum path sum in a matrix
- good question to solve and a bit of different approach.

solution is, 
    - get all the paths and return minimum of that
    - bottom up approach in starting with recursion (base case was i==0 && j==0 then return grid[i][j])
    - then created a dp to convert into Memoisation
    - then run the for loops for tabulation (from 0 to m and n - nested loops)
    - then took 2 arrays to store the current and previous path sum and then swap in order to space optimize the solution

______________________

DP11:-

- Triangle question.
    - learned that Tabulation is always reverse of the recursion we write.
    - after writing recurrance everything is cakewalk.

______________________


